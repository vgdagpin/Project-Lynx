// <auto-generated />
using System;
using Lynx.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lynx.DbMigration.SqlServer.Migrations
{
    [DbContext(typeof(LynxDbContext))]
    [Migration("20210228184418_x")]
    partial class x
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lynx.Domain.Entities.Bill", b =>
                {
                    b.Property<short>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("tbl_Bill", "dbo");

                    b.HasData(
                        new
                        {
                            ID = (short)1,
                            AssemblyName = "Lynx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Code = "Globe",
                            IsEnabled = true,
                            LongDesc = "Globe",
                            ShortDesc = "Globe",
                            TypeName = "Lynx.Commands.BillCmds.GlobeBillCmd"
                        },
                        new
                        {
                            ID = (short)2,
                            AssemblyName = "Lynx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Code = "Meralco",
                            IsEnabled = true,
                            LongDesc = "Meralco",
                            ShortDesc = "Meralco",
                            TypeName = "Lynx.Commands.BillCmds.MeralcoBillCmd"
                        },
                        new
                        {
                            ID = (short)3,
                            AssemblyName = "Lynx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Code = "House Loan Amortization",
                            IsEnabled = true,
                            LongDesc = "House Loan Amortization",
                            ShortDesc = "House Loan Amortization",
                            TypeName = "Lynx.Commands.BillCmds.HouseLoanAmortizationCmd"
                        },
                        new
                        {
                            ID = (short)4,
                            AssemblyName = "Lynx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            Code = "Car Loan Amortization",
                            IsEnabled = true,
                            LongDesc = "Car Loan Amortization",
                            ShortDesc = "Car Loan Amortization",
                            TypeName = "Lynx.Commands.BillCmds.CarLoanAmortizationCmd"
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.BillProvider", b =>
                {
                    b.Property<short>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("BillID")
                        .HasColumnType("smallint");

                    b.Property<string>("LongDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("ProviderTypeID")
                        .HasColumnType("smallint");

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("BillID");

                    b.HasIndex("ProviderTypeID");

                    b.ToTable("tbl_BillProvider", "dbo");

                    b.HasData(
                        new
                        {
                            ID = (short)1,
                            BillID = (short)1,
                            ProviderTypeID = (short)3
                        },
                        new
                        {
                            ID = (short)2,
                            BillID = (short)2,
                            ProviderTypeID = (short)3
                        },
                        new
                        {
                            ID = (short)3,
                            BillID = (short)3,
                            ProviderTypeID = (short)1
                        },
                        new
                        {
                            ID = (short)4,
                            BillID = (short)4,
                            ProviderTypeID = (short)1
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.BillSetting", b =>
                {
                    b.Property<short>("BillID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("BillID", "Code");

                    b.ToTable("tbl_BillSetting", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.NotificationConfiguration", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("N_UserBillTrackingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("N_UserBillTrackingUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserBillTrackingID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("N_UserBillTrackingID", "N_UserBillTrackingUserID");

                    b.ToTable("tbl_NotificationConfiguration", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_NotificationTemplate", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.ProviderType", b =>
                {
                    b.Property<short>("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("tbl_ProviderType", "dbo");

                    b.HasData(
                        new
                        {
                            ID = (short)1,
                            LongDesc = "Scheduled",
                            ShortDesc = "Scheduled"
                        },
                        new
                        {
                            ID = (short)2,
                            LongDesc = "API",
                            ShortDesc = "API"
                        },
                        new
                        {
                            ID = (short)3,
                            LongDesc = "Email",
                            ShortDesc = "Email"
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.ProviderTypeConfigEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("tbl_ProviderTypeConfigEmail", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.ProviderTypeConfigScheduler", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<short?>("DayFrequency")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LongDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("SkipTimes")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("ID", "UserID")
                        .IsUnique();

                    b.ToTable("tbl_ProviderTypeConfigScheduler", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000003"),
                            Amount = 21000m,
                            DayFrequency = (short)23,
                            EndDate = new DateTime(2021, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2021, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 14000m,
                            DayFrequency = (short)28,
                            EndDate = new DateTime(2021, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2021, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000005"),
                            Amount = 15000m,
                            DayFrequency = (short)13,
                            EndDate = new DateTime(2021, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2021, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.ProviderTypeConfigWebService", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("tbl_ProviderTypeConfigWebService", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.SchedulerEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GeneratedUserBillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("TrackBillSchedulerID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("TrackBillSchedulerID");

                    b.ToTable("tbl_SchedulerEntry", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            Amount = 21000m,
                            DueDate = new DateTime(2021, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneratedUserBillID = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsGenerated = true,
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            Amount = 21000m,
                            DueDate = new DateTime(2021, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000003"),
                            Amount = 21000m,
                            DueDate = new DateTime(2021, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 21000m,
                            DueDate = new DateTime(2021, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000005"),
                            Amount = 14000m,
                            DueDate = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneratedUserBillID = new Guid("00000000-0000-0000-0000-000000000003"),
                            IsGenerated = true,
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000006"),
                            Amount = 14000m,
                            DueDate = new DateTime(2021, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000007"),
                            Amount = 14000m,
                            DueDate = new DateTime(2021, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000008"),
                            Amount = 14000m,
                            DueDate = new DateTime(2021, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000009"),
                            Amount = 15000m,
                            DueDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneratedUserBillID = new Guid("00000000-0000-0000-0000-000000000004"),
                            IsGenerated = true,
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Amount = 15000m,
                            DueDate = new DateTime(2021, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Amount = 15000m,
                            DueDate = new DateTime(2021, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Amount = 15000m,
                            DueDate = new DateTime(2021, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrackBillSchedulerID = new Guid("00000000-0000-0000-0000-000000000005")
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.TrackBill", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("BillID")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("N_ProviderTypeConfigEmailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("N_ProviderTypeConfigWebServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ProviderTypeID")
                        .HasColumnType("smallint");

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID", "UserID");

                    b.HasIndex("BillID");

                    b.HasIndex("N_ProviderTypeConfigEmailID");

                    b.HasIndex("N_ProviderTypeConfigWebServiceID");

                    b.HasIndex("ProviderTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("tbl_TrackBill", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccountNumber = "GLOBE-ACCT-NUM",
                            BillID = (short)1,
                            IsEnabled = true,
                            ProviderTypeID = (short)3
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccountNumber = "MERALCO-ACCT-NUM",
                            BillID = (short)2,
                            IsEnabled = true,
                            ProviderTypeID = (short)3
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccountNumber = "LANCASTER-ACCT-NUM",
                            BillID = (short)3,
                            IsEnabled = true,
                            ProviderTypeID = (short)1
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccountNumber = "588-ACCT-NUM",
                            BillID = (short)3,
                            IsEnabled = true,
                            ProviderTypeID = (short)1
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccountNumber = "BRV-ACCT-NUM",
                            BillID = (short)4,
                            IsEnabled = true,
                            ProviderTypeID = (short)1
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.TrackBillSetting", b =>
                {
                    b.Property<Guid>("TrackBillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TrackBillID", "UserID", "Code");

                    b.ToTable("tbl_TrackBillSetting", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("tbl_User", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            FirstName = "Admin",
                            LastName = "Admin"
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            FirstName = "Vincent",
                            LastName = "Dagpin"
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBill", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TrackBillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("TrackBillID", "UserID");

                    b.ToTable("tbl_UserBill", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            Amount = 2100m,
                            DueDate = new DateTime(2021, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TrackBillID = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            Amount = 2100m,
                            DueDate = new DateTime(2021, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TrackBillID = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000003"),
                            Amount = 14000m,
                            DueDate = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TrackBillID = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 15000m,
                            DueDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TrackBillID = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillAttachment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserBillID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserBillID");

                    b.ToTable("tbl_UserBillAttachment", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserBillID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserBillID");

                    b.ToTable("tbl_UserBillPayment", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillPaymentTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("TransactionStatus")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserBillPaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserBillPaymentID");

                    b.ToTable("tbl_UserBillPaymentTransaction", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTemporaryPassword")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TemporaryPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("tbl_UserLogin", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsTemporaryPassword = true,
                            Password = new byte[] { 217, 202, 150, 25, 117, 221, 121, 108, 37, 105, 80, 196, 244, 39, 65, 219, 215, 163, 50, 198, 193, 228, 162, 123, 181, 60, 246, 155, 163, 199, 37, 50 },
                            Salt = new byte[] { 48, 48, 48, 48, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49 },
                            TemporaryPassword = "k4m0t3",
                            Username = "admin"
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsTemporaryPassword = true,
                            Password = new byte[] { 9, 238, 26, 39, 21, 0, 163, 101, 247, 77, 240, 232, 43, 49, 198, 12, 240, 157, 218, 92, 107, 1, 52, 133, 11, 6, 230, 247, 114, 49, 127, 182 },
                            Salt = new byte[] { 48, 48, 48, 48, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50 },
                            TemporaryPassword = "k4m0t3",
                            Username = "vgdagpin"
                        });
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceivedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("tbl_UserNotification", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CONVERT(BIT, (IIF(ExpiredOn IS NOT NULL AND GETUTCDATE() >= ExpiredOn, 1, 0)))");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionID");

                    b.HasIndex("UserID");

                    b.ToTable("tbl_UserSession", "dbo");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.BillProvider", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.Bill", null)
                        .WithMany("N_BillProviders")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lynx.Domain.Entities.ProviderType", "N_ProviderType")
                        .WithMany()
                        .HasForeignKey("ProviderTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_ProviderType");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.BillSetting", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.Bill", null)
                        .WithMany("N_BillSettings")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lynx.Domain.Entities.NotificationConfiguration", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.TrackBill", "N_UserBillTracking")
                        .WithMany("N_NotificationConfigurations")
                        .HasForeignKey("N_UserBillTrackingID", "N_UserBillTrackingUserID");

                    b.Navigation("N_UserBillTracking");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.ProviderTypeConfigScheduler", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.User", "N_User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lynx.Domain.Entities.TrackBill", "N_TrackBill")
                        .WithOne("N_ProviderTypeConfigScheduler")
                        .HasForeignKey("Lynx.Domain.Entities.ProviderTypeConfigScheduler", "ID", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_TrackBill");

                    b.Navigation("N_User");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.SchedulerEntry", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.ProviderTypeConfigScheduler", null)
                        .WithMany("N_ScheduleEntries")
                        .HasForeignKey("TrackBillSchedulerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lynx.Domain.Entities.TrackBill", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.Bill", "N_Bill")
                        .WithMany()
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lynx.Domain.Entities.ProviderTypeConfigEmail", "N_ProviderTypeConfigEmail")
                        .WithMany()
                        .HasForeignKey("N_ProviderTypeConfigEmailID");

                    b.HasOne("Lynx.Domain.Entities.ProviderTypeConfigWebService", "N_ProviderTypeConfigWebService")
                        .WithMany()
                        .HasForeignKey("N_ProviderTypeConfigWebServiceID");

                    b.HasOne("Lynx.Domain.Entities.ProviderType", "N_ProviderType")
                        .WithMany()
                        .HasForeignKey("ProviderTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lynx.Domain.Entities.User", "N_User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Bill");

                    b.Navigation("N_ProviderType");

                    b.Navigation("N_ProviderTypeConfigEmail");

                    b.Navigation("N_ProviderTypeConfigWebService");

                    b.Navigation("N_User");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.TrackBillSetting", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.TrackBill", null)
                        .WithMany("N_TrackBillSettings")
                        .HasForeignKey("TrackBillID", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBill", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.User", "N_User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Lynx.Domain.Entities.TrackBill", "N_TrackBill")
                        .WithMany()
                        .HasForeignKey("TrackBillID", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_TrackBill");

                    b.Navigation("N_User");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillAttachment", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.UserBill", null)
                        .WithMany("N_Attachments")
                        .HasForeignKey("UserBillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillPayment", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.UserBill", null)
                        .WithMany("N_UserBillPayments")
                        .HasForeignKey("UserBillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillPaymentTransaction", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.UserBillPayment", null)
                        .WithMany("N_UserBillPaymentTransactions")
                        .HasForeignKey("UserBillPaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.User", "User")
                        .WithOne("UserLogin")
                        .HasForeignKey("Lynx.Domain.Entities.UserLogin", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.User", "N_User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_User");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("Lynx.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.Bill", b =>
                {
                    b.Navigation("N_BillProviders");

                    b.Navigation("N_BillSettings");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.ProviderTypeConfigScheduler", b =>
                {
                    b.Navigation("N_ScheduleEntries");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.TrackBill", b =>
                {
                    b.Navigation("N_NotificationConfigurations");

                    b.Navigation("N_ProviderTypeConfigScheduler");

                    b.Navigation("N_TrackBillSettings");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.User", b =>
                {
                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBill", b =>
                {
                    b.Navigation("N_Attachments");

                    b.Navigation("N_UserBillPayments");
                });

            modelBuilder.Entity("Lynx.Domain.Entities.UserBillPayment", b =>
                {
                    b.Navigation("N_UserBillPaymentTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
